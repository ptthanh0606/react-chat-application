{"version":3,"sources":["slices/auth/loginMessage.js","slices/auth/authSlice.js","views/Loading/index.js","_utils/colors.js","api/index.js","slices/selecteds/index.js","slices/refresh/index.js","_hooks/useLocalStorage.js","_contexts/ContactsProvider.js","_contexts/ConversationsProvider.js","_hooks/useLogin.js","_auth/Authorize.js","_auth/Auth.js","views/App.js","slices/message/index.js","app/store.js","serviceWorker.js","index.js"],"names":["LoginMessageSlice","createSlice","name","initialState","label","reducers","setLoginMessage","state","action","payload","actions","loginMessageSelector","loginMessage","loginMessageReducer","reducer","authSlice","user","setUserInfo","authSelector","auth","authReducer","Loading","text","props","className","style","height","type","color","width","React","memo","API_URL","login","getContacts","uuid","addContact","getConversations","startConversation","sendMessage","conversationId","getMessages","SelectedsSlice","setSelectedUUID","setSelectedConversationId","selectedsSelector","selecteds","selectedsReducer","refreshSlice","trigger","triggerRefresh","console","log","refreshSelector","refresh","triggger","refreshReducer","PREFIX","useLocalStorage","key","initialValue","prefixedKey","useState","JsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","ContactsContext","createContext","ContactsProvider","children","contacts","setContacts","createContact","useCallback","userid","username","prev","Provider","ConversationsContext","ConversationsProvider","conversations","setConversations","useContext","createConversation","selectedIds","extendedSelectedIds","map","id","find","contact","prevConversations","recipients","messages","useLogin","dispatch","useDispatch","setAuthenticatedState","doLogin","loginInfo","Promise","resolve","reject","axios","post","then","result","data","catch","err","response","Authorize","routeParam","useLocation","history","useHistory","setLoginInfo","loadingLabel","setLoadingLabel","setTimeout","push","Login","lazy","Dashboard","Auth","handleCreateNewId","fallback","path","exact","onCreateNewId","App","MessageSlice","setMessage","messageReducer","configureStore","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","position","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.949950b7.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst LoginMessageSlice = createSlice({\r\n  name: \"LoginMessageSlice\",\r\n  initialState: {\r\n    label: \"\",\r\n  },\r\n  reducers: {\r\n    setLoginMessage: (state, action) => {\r\n      state.label = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoginMessage } = LoginMessageSlice.actions;\r\n\r\nexport const loginMessageSelector = (state) => state.loginMessage.label;\r\n\r\nexport const loginMessageReducer = LoginMessageSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authSlice\",\r\n  initialState: {\r\n    user: {},\r\n  },\r\n  reducers: {\r\n    setUserInfo: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUserInfo } = authSlice.actions;\r\nexport const authSelector = (state) => state.auth.user;\r\nexport const authReducer = authSlice.reducer;\r\n","import React from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { PRIMARY } from \"../../_utils/colors\";\r\n\r\nconst Loading = ({ text = \"Stuff up some works...\", ...props }) => {\r\n  return (\r\n    <div\r\n      className=\"d-flex align-items-center justify-content-center\"\r\n      style={{ height: \"100vh\" }}\r\n      {...props}\r\n    >\r\n      <div className=\"d-flex flex-column align-items-center justify-content-center\">\r\n        <ReactLoading type=\"spin\" color={PRIMARY} height={42} width={42} />\r\n        <span className=\"font-weight-bold mt-2\">{text}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Loading);\r\n","export const PRIMARY = \"#F74F4F\";\r\nexport const TEXT = \"#2D3034\";\r\n","export const API_URL =\r\n  \"http://chat-application.us-east-2.elasticbeanstalk.com/api/\";\r\n\r\nexport const login = API_URL + \"user/login\";\r\n\r\nexport const getContacts = function (uuid) {\r\n  return API_URL + \"contact?uuid=\" + uuid;\r\n};\r\n\r\nexport const addContact = function (uuid) {\r\n  return API_URL + \"contact/addcontact?uuid=\" + uuid;\r\n};\r\n\r\nexport const getConversations = function (uuid) {\r\n  return API_URL + \"conversation?uuid=\" + uuid;\r\n};\r\n\r\nexport const startConversation = function (uuid) {\r\n  return API_URL + \"conversation/startConversation?uuid=\" + uuid;\r\n};\r\n\r\nexport const sendMessage = function (conversationId) {\r\n  return API_URL + \"message/sendMessage?conversationId=\" + conversationId;\r\n};\r\n\r\nexport const getMessages = function (conversationId, uuid) {\r\n  return API_URL + \"message?conversationId=\" + conversationId + \"&uuid=\" + uuid;\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst SelectedsSlice = createSlice({\r\n  name: \"SelectedsSlice\",\r\n  initialState: {\r\n    uuid: \"\",\r\n    conversationId: \"\",\r\n  },\r\n  reducers: {\r\n    setSelectedUUID: (state, action) => {\r\n      state.uuid = action.payload;\r\n    },\r\n    setSelectedConversationId: (state, action) => {\r\n      state.conversationId = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectedsSelector = (state) => state.selecteds;\r\n\r\nexport const {\r\n  setSelectedUUID,\r\n  setSelectedConversationId,\r\n} = SelectedsSlice.actions;\r\n\r\nexport const selectedsReducer = SelectedsSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst refreshSlice = createSlice({\r\n  name: \"refreshSlice\",\r\n  initialState: {\r\n    trigger: {},\r\n  },\r\n  reducers: {\r\n    triggerRefresh: (state, action) => {\r\n      console.log(\"Hello\");\r\n      state = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { triggerRefresh } = refreshSlice.actions;\r\n\r\nexport const refreshSelector = (state) => state.refresh.triggger;\r\n\r\nexport const refreshReducer = refreshSlice.reducer;\r\n","import React from \"react\";\r\n\r\nconst PREFIX = \"CHATAPP-\";\r\n\r\nexport default function useLocalStorage(key = \"\", initialValue = \"\") {\r\n  const prefixedKey = PREFIX + key;\r\n\r\n  const [value, setValue] = React.useState(() => {\r\n    const JsonValue = localStorage.getItem(prefixedKey);\r\n\r\n    if (JsonValue !== null) {\r\n      return JSON.parse(JsonValue);\r\n    }\r\n\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../_hooks/useLocalStorage\";\r\n\r\nconst ContactsContext = React.createContext();\r\n\r\nexport const ContactsProvider = ({ children }) => {\r\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\r\n\r\n  const createContact = React.useCallback(\r\n    ({ userid, username }) => {\r\n      setContacts((prev) => {\r\n        return [...prev, { userid, username }];\r\n      });\r\n    },\r\n    [setContacts]\r\n  );\r\n\r\n  return (\r\n    <ContactsContext.Provider value={{ contacts, createContact }}>\r\n      {children}\r\n    </ContactsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useContacts = () => {\r\n  return useContext(ContactsContext);\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport useLocalStorage from \"../_hooks/useLocalStorage\";\r\nimport { useContacts } from \"./ContactsProvider\";\r\n\r\nconst ConversationsContext = React.createContext();\r\n\r\nexport const useConversation = () => {\r\n  return useContext(ConversationsContext);\r\n};\r\n\r\nexport const ConversationsProvider = ({ children }) => {\r\n  const [conversations, setConversations] = useLocalStorage(\r\n    \"conversations\",\r\n    []\r\n  );\r\n  const { contacts } = useContacts();\r\n\r\n  const createConversation = React.useCallback(\r\n    (selectedIds) => {\r\n      const extendedSelectedIds = selectedIds.map((id) => {\r\n        return contacts.find((contact) => id === contact.userid);\r\n      });\r\n      setConversations((prevConversations) => {\r\n        return [\r\n          ...prevConversations,\r\n          { recipients: extendedSelectedIds, messages: [] },\r\n        ];\r\n      });\r\n    },\r\n    [contacts, setConversations]\r\n  );\r\n\r\n  return (\r\n    <ConversationsContext.Provider\r\n      value={{ conversations, createConversation }}\r\n    >\r\n      {children}\r\n    </ConversationsContext.Provider>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login } from \"../api\";\r\nimport { setUserInfo } from \"../slices/auth/authSlice\";\r\nimport { setLoginMessage } from \"../slices/auth/loginMessage\";\r\n\r\nexport const useLogin = () => {\r\n  const dispatch = useDispatch();\r\n  const [, setAuthenticatedState] = React.useState(false);\r\n\r\n  const doLogin = React.useCallback(\r\n    (loginInfo) => {\r\n      return new Promise((resolve, reject) => {\r\n        axios\r\n          .post(login, loginInfo)\r\n          .then((result) => {\r\n            dispatch(setUserInfo(result.data.data));\r\n            setAuthenticatedState(true);\r\n            resolve();\r\n          })\r\n          .catch((err) => {\r\n            if (!{ ...err }.response) {\r\n              dispatch(\r\n                setLoginMessage(\r\n                  \"Server error! Please contact the administrator.\"\r\n                )\r\n              );\r\n            } else {\r\n              dispatch(\r\n                setLoginMessage(\r\n                  \"Incorrect password or email! Please try again.\"\r\n                )\r\n              );\r\n            }\r\n            setAuthenticatedState(false);\r\n            reject();\r\n          });\r\n      });\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (loginInfo) => doLogin(loginInfo);\r\n};\r\n\r\nexport default React.memo(useLogin);\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport Loading from \"../views/Loading\";\r\nimport useLocalStorage from \"../_hooks/useLocalStorage\";\r\nimport { useLogin } from \"../_hooks/useLogin\";\r\n\r\n// Login authorization\r\n\r\nconst Authorize = ({ ...props }) => {\r\n  const { state: routeParam } = useLocation();\r\n  const history = useHistory();\r\n  const login = useLogin();\r\n  const [loginInfo, setLoginInfo] = useLocalStorage(\"USER_CREDENTIAL\");\r\n  const [loadingLabel, setLoadingLabel] = React.useState(\"Please wait...\");\r\n\r\n  React.useEffect(() => {\r\n    setLoadingLabel(\"Login in...\");\r\n    login(routeParam)\r\n      .then(() => {\r\n        setTimeout(() => {\r\n          setLoadingLabel(\"Welcome\");\r\n          setLoginInfo(routeParam);\r\n          setTimeout(() => {\r\n            history.push(\"/my-dashboard\");\r\n          }, 2000);\r\n        }, 2000);\r\n      })\r\n      .catch(() => {\r\n        setTimeout(() => {\r\n          setLoadingLabel(\"There is something wrong...\");\r\n          setTimeout(() => {\r\n            history.push(\"/login\");\r\n          }, 2000);\r\n        }, 2000);\r\n      });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return <Loading text={loadingLabel} />;\r\n};\r\n\r\nexport default React.memo(Authorize);\r\n","import React, { Suspense } from \"react\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport useLocalStorage from \"../_hooks/useLocalStorage\";\r\nimport { v4 as genUUID } from \"uuid\";\r\nimport { ContactsProvider } from \"../_contexts/ContactsProvider\";\r\nimport { ConversationsProvider } from \"../_contexts/ConversationsProvider\";\r\nimport Authorize from \"./Authorize\";\r\nimport { useLogin } from \"../_hooks/useLogin\";\r\n\r\nconst Login = React.lazy(() => import(\"../views/Login/Login\"));\r\nconst Loading = React.lazy(() => import(\"../views/Loading\"));\r\nconst Dashboard = React.lazy(() => import(\"../views/Dashboard\"));\r\n\r\n// Auth route to check authentication\r\n\r\nconst Auth = () => {\r\n  const history = useHistory();\r\n  const login = useLogin();\r\n\r\n  const [loginInfo] = useLocalStorage(\"USER_CREDENTIAL\");\r\n\r\n  const handleCreateNewId = React.useCallback(() => {\r\n    // setUuid(genUUID());\r\n    // dispatch(setLoginState(true));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (loginInfo) {\r\n      login(loginInfo)\r\n        .then(() => {\r\n          history.push(\"/my-dashboard\");\r\n        })\r\n        .catch(() => {\r\n          console.log(\"Hello\");\r\n          history.push(\"/login\");\r\n        });\r\n    } else {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [history, login, loginInfo]);\r\n\r\n  return (\r\n    <Suspense fallback={<Loading />}>\r\n      <Switch>\r\n        <Route path=\"/login\" exact>\r\n          <Login onCreateNewId={handleCreateNewId} />\r\n        </Route>\r\n        <Route path=\"/auth\" exact>\r\n          <Authorize />\r\n        </Route>\r\n        <Route path=\"/my-dashboard\" exact>\r\n          <ContactsProvider>\r\n            <ConversationsProvider>\r\n              <Dashboard />\r\n            </ConversationsProvider>\r\n          </ContactsProvider>\r\n        </Route>\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default React.memo(Auth);\r\n","import React, { Suspense } from \"react\";\r\nimport Loading from \"./Loading\";\r\nimport Auth from \"../_auth/Auth\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<Loading text=\"Thinking...\"></Loading>}>\r\n      <Auth />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default React.memo(App);\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst MessageSlice = createSlice({\r\n  name: \"MessageSlice\",\r\n  initialState: {\r\n    messages: [],\r\n  },\r\n  reducers: {\r\n    setMessage: (state, action) => {},\r\n  },\r\n});\r\n\r\nexport const { setMessage } = MessageSlice.actions;\r\n\r\nexport const messageSelector = (state) => state.message.messages;\r\n\r\nexport const messageReducer = MessageSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { authReducer } from \"../slices/auth/authSlice\";\r\nimport { messageReducer } from \"../slices/message\";\r\nimport { selectedsReducer } from \"../slices/selecteds\";\r\nimport { loginMessageReducer } from \"../slices/auth/loginMessage\";\r\nimport { refreshReducer } from \"../slices/refresh\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    message: messageReducer,\r\n    selecteds: selectedsReducer,\r\n    loginMessage: loginMessageReducer,\r\n    refresh: refreshReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./views/App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n        <ToastContainer position={\"bottom-left\"} className=\"font-weight-bold\" />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}